{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Person.js","components/Persons.js","services/person.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filter","handleFilterChange","value","onChange","PersonForm","addPersons","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Person","person","handleDelete","name","number","onClick","id","Persons","persons","newFilter","personsFiltered","toLowerCase","includes","map","key","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","notiStyle","color","background","fontSize","bordeStyle","borderRadius","padding","marginBottom","content","style","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","setMessage","useEffect","personService","intialPersons","showNotification","Error","errorMessage","undefined","error","setTimeout","event","target","personObject","preventDefault","filteredPerson","length","window","confirm","personA","catch","newPerson","concat","personName","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.83703272.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = ({filter, handleFilterChange}) => {\n  return(\n    <div>filter shown with <input value={filter} onChange={handleFilterChange} /></div>\n  )\n}\nexport default Filter\n","import React from 'react';\n\nconst PersonForm = ({addPersons, newName, handleNameChange, newNumber, handleNumberChange}) => {\n    return (\n        <div>\n\n            <form onSubmit={addPersons}>\n                <div>\n                    name :<input value={newName} onChange={handleNameChange} />\n                </div>\n                <div>\n                    number: <input value={newNumber} onChange={handleNumberChange} />\n                </div>\n                <div>\n                    <button type=\"submit\">add</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default PersonForm\n","import React from 'react'\r\n\r\nconst Person = ({person, handleDelete}) => {\r\n    return(\r\n        <div>\r\n            {person.name} {person.number} \r\n            <button onClick={() => handleDelete(person.id, person.name)} >Delete</button>\r\n    </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Person;","import React from 'react';\nimport Person from './Person'\n\nconst Persons = ({persons, newFilter, handleDelete}) => {\n    const personsFiltered = persons.filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase()))\n\n    return(\n        <div>\n            {personsFiltered.map((person) => (\n                <Person\n                    key={person.id}\n                    person={person}\n                    handleDelete={handleDelete}\n                />  \n            ))}\n        </div>\n    )\n}\n\nexport default Persons\n","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default{ getAll: getAll, create: create, update:update, remove: remove}","import React from 'react'\r\n\r\nconst Notification = ({message}) => {\r\n    const notiStyle = {\r\n        \r\n        color: message.color,\r\n        background: 'lightgrey',\r\n        fontSize: 20,\r\n        bordeStyle: 'solid',\r\n        borderRadius: 5,\r\n        padding: 10,\r\n        marginBottom: 10,\r\n    }\r\n\r\n    if (message.content === null) {\r\n        return null;\r\n    }\r\n\r\n    return(\r\n        <div style={notiStyle}>\r\n            {message.content}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification;","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport personService from './services/person'\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('A new name')\n  const [newNumber, setNewNumber] = useState('A new number')\n  const [ newFilter, setNewFilter ] = useState('') \n  const [message,setMessage] = useState({content: null})\n\n  useEffect(() =>{\n    personService\n      .getAll()\n        .then(intialPersons => {\n          setPersons(intialPersons)\n        })\n  },[])\n\n  const showNotification = (content, color = '#228B22') => {\n\n    if(content instanceof Error){\n      const errorMessage =\n       content.response.data.error !== undefined\n       ? content.response.data.error\n       : 'Opps something went wrong'\n\n       setMessage({content: errorMessage, color: 'red'})\n       setTimeout(() => {\n         setMessage({content: null})\n       }, 5000);\n    } else{\n      setMessage({content, color})\n      setTimeout(() => {\n        setMessage({content: null})\n      }, 5000);\n    }\n  }\n  \n  const addPersons = (event) => {\n    const personObject = {\n      name: newName,\n      number: newNumber,\n    }\n    event.preventDefault()\n    const filteredPerson = persons.filter(person => person.name===personObject.name)\n    if(filteredPerson.length > 0 ){\n      if(window.confirm(`${personObject.name} is already added to phonebook. Would you like to update the number?`)){\n        personService\n          .update(filteredPerson[0].id, personObject)\n            .then(personA => {\n              personService\n                .getAll()\n                  .then(intialPersons => {\n                   setPersons(intialPersons)\n                   setNewName('')\n                   setNewNumber('')\n                   showNotification(`Updated ${personObject.name}'s number`)\n                  })\n\n              \n            })\n            .catch((error) => {\n              showNotification(error)\n              setPersons(persons.filter((person) => person.id !== filteredPerson[0].id))\n            })\n            personService\n              .getAll()\n              .then(persons => setPersons(persons))    \n      }\n    }else{\n      \n      personService\n        .create(personObject)\n          .then(newPerson => {\n            setPersons(persons.concat(newPerson))\n            setNewName('')\n            setNewNumber('')\n            showNotification(`Added ${personObject.name}'s number to the Phonebook`)\n          })\n          .catch(error => {\n            showNotification(error)\n          })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) =>{\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value) \n  }\n\n  const handleDelete = (id, personName) => {\n    if(window.confirm(`Do you want to delete ${personName} from your list?`)){\n      personService\n        .remove(id)\n          .then(() => {\n            setPersons(persons.filter(person => person.id !== id))\n          })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter\n        filter={newFilter}\n        handleFilterChange={handleFilterChange}/>\n      <h2>add a new</h2>\n      <PersonForm\n        addPersons={addPersons}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        persons={persons}\n        newFilter={newFilter}\n        handleDelete={handleDelete}\n      />\n     \n    </div>\n  )\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}